package org.infy.scanner.vulnerability;

import java.time.Duration;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

public class RateLimiter {
    private final int maxRequests;
    private final Duration window;
    private final AtomicInteger requestCount;
    private final AtomicLong windowStart;

    public RateLimiter(int maxRequests, Duration window) {
        this.maxRequests = maxRequests;
        this.window = window;
        this.requestCount = new AtomicInteger(0);
        this.windowStart = new AtomicLong(System.currentTimeMillis());
    }

    public void acquire() throws InterruptedException {
        long now = System.currentTimeMillis();
        long windowStartTime = windowStart.get();
        
        if (now - windowStartTime >= window.toMillis()) {
            // Reset window
            windowStart.set(now);
            requestCount.set(0);
        }

        while (true) {
            int count = requestCount.get();
            if (count < maxRequests) {
                if (requestCount.compareAndSet(count, count + 1)) {
                    return;
                }
            } else {
                long sleepTime = windowStartTime + window.toMillis() - now;
                if (sleepTime > 0) {
                    Thread.sleep(sleepTime);
                }
                // Reset window after sleep
                windowStart.set(System.currentTimeMillis());
                requestCount.set(0);
            }
        }
    }
} 